/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwo(ListNode* l1 , ListNode* l2){
        if(l1== NULL ) return l2; 
        if(l2==NULL) return l1; 
        ListNode* head = NULL; 
        ListNode* tail = NULL ;
        while(l1!=NULL &&l2 != NULL) {
            if(l1->val<l2->val ){
                if(head == NULL || tail == NULL){
                    head = l1; 
                    tail = l1; 
                } else {
                    tail->next = l1; 
                    tail = tail ->next; 
                }
                l1= l1->next;
            }else {
                if(head == NULL || tail == NULL){
                    head = l2; 
                    tail = l2; 
                } else {
                    tail->next = l2; 
                    tail = tail ->next; 
                }
                l2= l2->next;
            }
        }
        if(l1!=NULL) tail->next = l1; 
        if(l2 != NULL) tail->next = l2; 
        return head; 
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int k = lists.size(); 
        if(k==0) return NULL; 
        if(k==1) return lists[0] ; 
        ListNode* temp = NULL; 
        for(int i=0; i<k; i++)
        {
            temp = mergeTwo(temp, lists[i]);
        }
        return temp; 
    }
};
